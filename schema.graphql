schema {
  query: Root
  mutation: Mutation
  subscription: Subscription
}

type Build {
  id: ID!
  repositoryId: ID!
  branch: String!
  changeIdInRepo: String!
  changeMessageTitle: String
  changeMessage: String
  authorName: String
  durationInSeconds: Long
  changeTimestamp: Long!
  buildCreatedTimestamp: Long!
  buildFinishedTimestamp: Long
  status: BuildStatus
  notifications: [Notification]
  tasks: [Task]
  repository: Repository!
}

# Build status.
enum BuildStatus {
  CREATED
  NEEDS_APPROVAL
  TRIGGERED
  EXECUTING
  FAILED
  COMPLETED
}

type GitHubOrganization {
  accountId: Long!
  accountLogin: String!
  avatarUrl: String
  installationId: Long
}

# Long type
scalar Long

type Mutation {
  securedVariable(input: RepositorySecuredVariableInput!): RepositorySecuredVariablePayload
  rerun(input: TaskInput!): TaskPayload
}

type Notification {
  level: NotificationLevel
  message: String
}

# Notification level.
enum NotificationLevel {
  INFO
  WARNING
  ERROR
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# User access level.
enum PermissionType {
  NONE
  READ
  WRITE
  ADMIN
}

type Repository {
  id: ID!
  owner: String!
  name: String!
  cloneUrl: String!
  masterBranch: String!
  isPrivate: Boolean!
  lastMasterBuild: Build
  builds(
    # fetching only nodes before this node (exclusive)
    before: String

    # fetching only nodes after this node (exclusive)
    after: String

    # fetching only the first certain number of nodes
    first: Int

    # fetching only the last certain number of nodes
    last: Int

    # branch to fetch builds for
    branch: String
  ): RepositoryBuildsConnection
  settings: RepositorySettings
  viewerPermission: PermissionType
}

# An edge in a connection
type RepositoryBuildEdge {
  # The item at the end of the edge
  node: Build

  # cursor marks a unique position or index into the connection
  cursor: String!
}

# A connection to a list of items.
type RepositoryBuildsConnection {
  # a list of edges
  edges: [RepositoryBuildEdge]

  # details about this specific page
  pageInfo: PageInfo!
}

input RepositorySecuredVariableInput {
  clientMutationId: String!
  repositoryId: ID!
  valueToSecure: String!
}

type RepositorySecuredVariablePayload {
  clientMutationId: String!
  variableName: String!
}

type RepositorySettings {
  securedVariableValue: String
}

type Root {
  viewer: User
  repository(id: ID!): Repository
  githubRepository(owner: String!, name: String!): Repository
  build(id: ID!): Build
  task(id: ID!): Task
}

type Subscription {
  task(id: ID!): Task
  build(id: ID!): Build
}

type Task {
  id: ID!
  buildId: ID!
  repositoryId: ID!
  name: String!
  status: TaskStatus
  notifications: [Notification]
  commands: [TaskCommand]
  commandLogsTail(name: String!): [String]
  creationTimestamp: Long!
  durationInSeconds: Long!
  labels: [String]
  statusDurations: [TaskStatusDuration]
  repository: Repository!
  build: Build!
}

type TaskCommand {
  name: String
  status: TaskCommandStatus
  durationInSeconds: Int
}

# Task Command status.
enum TaskCommandStatus {
  UNDEFINED
  SUCCESS
  FAILURE
  EXECUTING
  SKIPPED
  ABORTED
}

input TaskInput {
  clientMutationId: String!
  taskId: String!
}

type TaskPayload {
  clientMutationId: String!
  newTask: Task!
}

# Task status.
enum TaskStatus {
  CREATED
  TRIGGERED
  SCHEDULED
  EXECUTING
  ABORTED
  FAILED
  COMPLETED
  SKIPPED
}

type TaskStatusDuration {
  status: TaskStatus!
  durationInSeconds: Long!
}

type User {
  id: ID!
  githubUserId: Long
  githubUserName: String!
  avatarURL: String
  builds(
    # fetching only nodes before this node (exclusive)
    before: String

    # fetching only nodes after this node (exclusive)
    after: String

    # fetching only the first certain number of nodes
    first: Int

    # fetching only the last certain number of nodes
    last: Int
  ): UserBuildsConnection
  githubOrganizations: [GitHubOrganization]
}

# An edge in a connection
type UserBuildEdge {
  # The item at the end of the edge
  node: Build

  # cursor marks a unique position or index into the connection
  cursor: String!
}

# A connection to a list of items.
type UserBuildsConnection {
  # a list of edges
  edges: [UserBuildEdge]

  # details about this specific page
  pageInfo: PageInfo!
}

